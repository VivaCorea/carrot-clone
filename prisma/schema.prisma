// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String?
  bio        String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tweets     Tweet[]
  likes      Like[]
  phone     String?    @unique
  github_id String?    @unique
  avatar    String?
  tokens     SMSToken[]
  products   Product[]
  posts      Post[]
  Comment    Comment[]
  response    Response[]
  Like_Post  Like_Post[]
}

model Tweet {
  id         Int      @id @default(autoincrement())
  tweet      String?
  views       Int     @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  response Response[]
  likes      Like[]
}

model Response {
  id      Int    @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId Int
  tweetId Int
}

model Like {
  
  created_at DateTime @default(now())
  user   User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  tweet      Tweet    @relation(fields: [tweet_id], references: [id], onDelete: Cascade)
  tweet_id   Int
  @@id(name: "id", [user_id, tweet_id])
}

model SMSToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like_Post[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like_Post {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
  @@id(name: "id", [userId, postId])
}